name: RDP via Tailscale

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    env:
      TAILSCALE_EXTRACT_PATH: ${{ runner.temp }}/tailscale-portable

    steps:

      - name: Configure RDP and Firewall
        shell: pwsh
        run: |
          Write-Host ">>> Enabling RDP and configuring firewall..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" -ErrorAction SilentlyContinue
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User
        id: create_user
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -Description "Temporary RDP user from GitHub Actions"
          }

          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue

          echo "RDP_USER=RDP" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Download & Extract Tailscale CLI
        id: install_ts
        shell: pwsh
        run: |
          $zipUrl = "https://pkgs.tailscale.com/stable/tailscale-windows-amd64.zip"
          $zipPath = "$env:TEMP\tailscale.zip"
          $extractPath = "${{ env.TAILSCALE_EXTRACT_PATH }}"

          if (Test-Path $extractPath) { Remove-Item -Recurse -Force $extractPath }

          Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath -UseBasicParsing
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          Remove-Item $zipPath -Force

          $tsExe = Join-Path $extractPath "tailscale.exe"
          if (-not (Test-Path $tsExe)) { Write-Error "Tailscale binary missing"; exit 1 }
          echo "TAILSCALE_EXE=$tsExe" >> $env:GITHUB_ENV

      - name: Start Tailscale
        shell: pwsh
        env:
          TS_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tsExe = "$env:TAILSCALE_EXE"
          if (-not (Test-Path $tsExe)) { Write-Error "Tailscale executable missing"; exit 1 }
          & $tsExe up --authkey=$env:TS_AUTH_KEY --hostname="gh-runner-$env:GITHUB_RUN_ID" --accept-routes

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 20)
          {
              $tsIP = (& $tsExe ip -4) -join " "
              if ($tsIP -and $tsIP.Trim() -ne "") { break }
              Start-Sleep -Seconds 3
              $retries++
          }
          $firstIP = ($tsIP -split '\s+' | Where-Object { $_ -match '^\d{1,3}(\.\d{1,3}){3}$' } | Select-Object -First 1)
          if (-not $firstIP) { Write-Error "Tailscale IP not assigned"; exit 1 }
          echo "TAILSCALE_IP=$firstIP" >> $env:GITHUB_ENV

      - name: Verify RDP
        shell: pwsh
        run: |
          $ip = $env:TAILSCALE_IP
          $test = Test-NetConnection -ComputerName $ip -Port 3389 -WarningAction SilentlyContinue
          if (-not $test.TcpTestSucceeded) { Write-Error "RDP not reachable"; exit 1 }

      - name: Create credentials file
        shell: pwsh
        run: |
          $credsPath = Join-Path $env:GITHUB_WORKSPACE "rdp-credentials.txt"
          $content = @"
RDP Address: $env:TAILSCALE_IP
Username: $env:RDP_USER
Password: $env:RDP_PASS
"@
          $content | Out-File -FilePath $credsPath -Encoding UTF8

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rdp-credentials
          path: ${{ github.workspace }}/rdp-credentials.txt

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host "`nRDP active. Credentials uploaded as artifact. Cancel workflow to terminate.`n"
          while ($true)
          {
              Start-Sleep -Seconds 300
          }

      - name: Cleanup (always)
        if: always()
        shell: pwsh
        run: |
          $tsExe = "$env:TAILSCALE_EXE"
          if (Test-Path $tsExe) { & $tsExe down }
          netsh advfirewall firewall delete rule name="RDP-Tailscale" -ErrorAction SilentlyContinue
          # Optional: remove RDP user
          # Remove-LocalUser -Name "RDP"
          $extractPath = "${{ env.TAILSCALE_EXTRACT_PATH }}"
          if (Test-Path $extractPath) { Remove-Item -Recurse -Force $extractPath }
